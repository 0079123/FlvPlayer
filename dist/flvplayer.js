/*!
 * FlvPlayer.js v1.1.0
 * Github: https://github.com/zhw2590582/FlvPlayer#readme
 * (c) 2017-2019 Harvey Zack
 * Released under the MIT License.
 */

!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).FlvPlayer=t()}(this,function(){"use strict";var r=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e};var c=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")};function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e};"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function e(e,t){return e(t={exports:{}},t.exports),t.exports}var a=e(function(t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?t.exports=r=function(e){return n(e)}:t.exports=r=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},r(e)}t.exports=r});var n=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e};var o=function(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?n(e):t},u=e(function(t){function n(e){return t.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(e)}t.exports=n}),s=e(function(n){function r(e,t){return n.exports=r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},r(e,t)}n.exports=r});var d,f=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)},l=e(function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e){return e.constructor?e.constructor.name:null}function c(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:["option"];return s(e,t=o(t),n),d(e,t,n),a(e,t,n),e}function a(a,o,u){var e=l(o),t=l(a);"object"===e&&"object"===t&&Object.keys(o).forEach(function(e){var t=a[e],n=o[e],r=u.slice();r.push(e),s(t,n,r),d(t,n,r),c(t,n,r)}),"array"===e&&"array"===t&&a.forEach(function(e,t){var n=a[t],r=o[t]||o[0],i=u.slice();i.push(t),s(n,r,i),d(n,r,i),c(n,r,i)})}function o(e){var t=l(e);return"string"===t?r({},p,e.trim().toLowerCase()):"function"===t?r({},h,e):e}function s(e,t,n){if("string"===l(t[p])){var r=l(e);if(!(-1<t[p].indexOf("|")?t[p].split("|").filter(Boolean).some(function(e){return r===e.trim()}):t[p]===r))throw new Error("[Type Error]: '".concat(n.join("."),"' require '").concat(t[p],"' type, but got '").concat(r,"'"))}}function d(e,t,n){if("function"===l(t[h])){var r=l(e),i=t[h](e,r,n);if(!0!==i){var a=l(i);throw"string"===a?new Error(i):"error"===a?i:new Error("[Validator Error]: The scheme for '".concat(n.join("."),"' validator require return true, but got '").concat(i,"'"))}}}var u,f,l,p,h;u=t,f=Object.prototype.toString,l=function(e){if(void 0===e)return"undefined";if(null===e)return"null";var t=n(e);if("boolean"===t)return"boolean";if("string"===t)return"string";if("number"===t)return"number";if("symbol"===t)return"symbol";if("function"===t)return function(e){return"GeneratorFunction"===i(e)}(e)?"generatorfunction":"function";if(function(e){return Array.isArray?Array.isArray(e):e instanceof Array}(e))return"array";if(function(e){return!(!e.constructor||"function"!=typeof e.constructor.isBuffer)&&e.constructor.isBuffer(e)}(e))return"buffer";if(function(e){try{if("number"==typeof e.length&&"function"==typeof e.callee)return!0}catch(e){if(-1!==e.message.indexOf("callee"))return!0}return!1}(e))return"arguments";if(function(e){return e instanceof Date||"function"==typeof e.toDateString&&"function"==typeof e.getDate&&"function"==typeof e.setDate}(e))return"date";if(function(e){return e instanceof Error||"string"==typeof e.message&&e.constructor&&"number"==typeof e.constructor.stackTraceLimit}(e))return"error";if(function(e){return e instanceof RegExp||"string"==typeof e.flags&&"boolean"==typeof e.ignoreCase&&"boolean"==typeof e.multiline&&"boolean"==typeof e.global}(e))return"regexp";switch(i(e)){case"Symbol":return"symbol";case"Promise":return"promise";case"WeakMap":return"weakmap";case"WeakSet":return"weakset";case"Map":return"map";case"Set":return"set";case"Int8Array":return"int8array";case"Uint8Array":return"uint8array";case"Uint8ClampedArray":return"uint8clampedarray";case"Int16Array":return"int16array";case"Uint16Array":return"uint16array";case"Int32Array":return"int32array";case"Uint32Array":return"uint32array";case"Float32Array":return"float32array";case"Float64Array":return"float64array"}if(function(e){return"function"==typeof e.throw&&"function"==typeof e.return&&"function"==typeof e.next}(e))return"generator";switch(t=f.call(e)){case"[object Object]":return"object";case"[object Map Iterator]":return"mapiterator";case"[object Set Iterator]":return"setiterator";case"[object String Iterator]":return"stringiterator";case"[object Array Iterator]":return"arrayiterator"}return t.slice(8,-1).toLowerCase().replace(/\s/g,"")},p=Symbol("TYPE"),h=Symbol("VALIDATOR"),c.kindOf=l,u.checkChild=a,u.formatScheme=o,u.checkType=s,u.checkValidator=d,u.default=c,Object.defineProperty(u,"__esModule",{value:!0})}),p=(d=l)&&d.__esModule&&Object.prototype.hasOwnProperty.call(d,"default")?d.default:d,h=function(){function u(){c(this,u)}return t(u,[{key:"on",value:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this}},{key:"once",value:function(r,i,a){var o=this;function u(){o.off(r,u);for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];i.apply(a,t)}return u._=i,this.on(r,u,a)}},{key:"emit",value:function(e){if(this.options.debug){var t=this.id;u[t]||(u[t]={}),u[t][e]?u[t][e]+=1:u[t][e]=1}for(var n=((this.e||(this.e={}))[e]||[]).slice(),r=arguments.length,i=new Array(1<r?r-1:0),a=1;a<r;a++)i[a-1]=arguments[a];for(var o=0;o<n.length;o+=1)n[o].fn.apply(n[o].ctx,i);return this}},{key:"off",value:function(e,t){var n=this.e||(this.e={}),r=n[e],i=[];if(r&&t)for(var a=0,o=r.length;a<o;a+=1)r[a].fn!==t&&r[a].fn._!==t&&i.push(r[a]);return i.length?n[e]=i:delete n[e],this}}]),u}();function g(e){c(this,g);var a=e.options.debug;this.log=function(e){if(a){for(var t,n=arguments.length,r=new Array(1<n?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];(t=console).log.apply(t,["FlvPlayer: [".concat(e,"]")].concat(r))}},this.warn=function(e){if(!e&&a){for(var t,n=arguments.length,r=new Array(1<n?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];(t=console).warn.apply(t,r)}},this.error=function(e,t){if(!e)throw new v(t)}}var m=function(e){return-1!==Function.toString.call(e).indexOf("[native code]")},y=e(function(r){function i(e,t,n){return!function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()?r.exports=i=function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&s(i,n.prototype),i}:r.exports=i=Reflect.construct,i.apply(null,arguments)}r.exports=i}),v=function(e){function n(e){var t;return c(this,n),(t=o(this,u(n).call(this,e))).name="FlvPlayerError",t}return f(n,e),n}(e(function(t){function r(e){var n="function"==typeof Map?new Map:void 0;return t.exports=r=function(e){if(null===e||!m(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,t)}function t(){return y(e,arguments,u(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),s(t,e)},r(e)}t.exports=r})(Error)),b=function(){function n(e){var t=this;c(this,n),this.destroys=[],this.proxy=this.proxy.bind(this),e.on("destroy",function(){t.destroy()})}return t(n,[{key:"proxy",value:function(t,e,n,r){var i=this,a=3<arguments.length&&void 0!==r?r:{};if(Array.isArray(e))return e.map(function(e){return i.proxy(t,e,n,a)});t.addEventListener(e,n,a);function o(){return t.removeEventListener(e,n,a)}return this.destroys.push(o),o}},{key:"destroy",value:function(){this.destroys.forEach(function(e){return e()})}}]),n}();function S(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}function w(){return/MicroMessenger/i.test(navigator.userAgent)}function T(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function x(r){var i=0;function a(e){for(var t=new Uint8Array(e),n=0;n<e;n+=1)t[n]=r[i],i+=1;return a.index=i,t}return a.index=0,a}function A(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t[0].constructor;return t.reduce(function(e,t){var n=new r((0|e.byteLength)+(0|t.byteLength));return n.set(e,0),n.set(t,0|e.byteLength),n},new r)}function k(e){return new Worker(URL.createObjectURL(new Blob([e],{type:"application/javascript"})))}function D(){return performance&&"function"==typeof performance.now?performance.now():Date.now()}function O(r,i,a){var o;function e(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];clearTimeout(o),o=setTimeout(function(){o=null,r.apply(a,t)},i)}return e.clearTimeout=function(){clearTimeout(o)},e}function P(i,a){var o,u,c=!1;return function e(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];if(c)return o=n,void(u=this);c=!0,i.apply(this,n),setTimeout(function(){c=!1,o&&(e.apply(u,o),u=o=null)},a)}}function C(e,t,n){return Math.max(Math.min(e,Math.max(t,n)),Math.min(t,n))}function j(r,i){return new Promise(function(e,t){var n=document.createElement("script");n.type="text/javascript",n.onload=function(){window[i]?e(window[i]):t(new Error("Unable to find global variable '".concat(i,"' from '").concat(r,"'")))},n.onerror=function(){t(new Error("Resource loading failed '".concat(r,"'")))},n.src=r,document.head.appendChild(n)})}function L(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return n.reduce(function(t,n){return Object.getOwnPropertyNames(n).forEach(function(e){if(T(t,e))throw new Error("Target attribute name is duplicated: ".concat(e));Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}),t},e)}function E(r){var i=0,a=D();return function(e){i+=e;var t=D(),n=t-a;1e3<=n&&(r(i/n*1e3),a=t,i=0)}}var M=Object.freeze({isMobile:S,isWechat:w,hasOwnProperty:T,readBuffer:x,mergeBuffer:A,createWorker:k,secondToTime:function(e){var t=Math.floor(e/3600),n=Math.floor((e-3600*t)/60),r=Math.floor(e-3600*t-60*n);return(0<t?[t,n,r]:[n,r]).map(function(e){return e<10?"0".concat(e):String(e)}).join(":")},getNowTime:D,debounce:O,throttle:P,clamp:C,setStyle:function t(n,r,e){return"object"===a(r)&&Object.keys(r).forEach(function(e){t(n,e,r[e])}),n.style[r]=e,n},getStyle:function(e,t){var n=!(2<arguments.length&&void 0!==arguments[2])||arguments[2],r=getComputedStyle(e,null).getPropertyValue(t);return n?parseFloat(r):r},loadScript:j,proxyPropertys:L,calculationRate:E});function B(e){c(this,B),function(e,t){var n=e.options,r=n.container.style.cssText;n.container.classList.add("flvplayer-container"),n.container.innerHTML='\n        <div class="flvplayer-player">\n            <canvas class="flvplayer-canvas" width="'.concat(n.width,'" height="').concat(n.height,'"></canvas>\n        </div>\n    '),e.on("destroy",function(){n.container.innerHTML="",n.container.style.cssText=r,n.container.classList.remove("flvplayer-container")}),Object.defineProperty(t,"$container",{value:n.container}),Object.defineProperty(t,"$player",{value:n.container.querySelector(".flvplayer-player")}),Object.defineProperty(t,"$canvas",{value:n.container.querySelector(".flvplayer-canvas")})}(e,this),function(n,r){Object.defineProperty(r,"rect",{get:function(){return r.$container.getBoundingClientRect()}}),["bottom","height","left","right","top","width"].forEach(function(e){Object.defineProperty(r,e,{get:function(){return r.rect[e]}})}),Object.defineProperty(r,"currentTime",{get:function(){return n.decoder.currentTime},set:function(e){n.options.cache&&n.decoder.seeked(C(e,0,r.loaded))}}),Object.defineProperty(r,"streaming",{get:function(){return n.demuxer.streaming}}),Object.defineProperty(r,"demuxed",{get:function(){return n.demuxer.demuxed}}),Object.defineProperty(r,"videoDecoding",{get:function(){return n.decoder.video.decoding}}),Object.defineProperty(r,"audioDecoding",{get:function(){return n.decoder.audio.decoding}}),Object.defineProperty(r,"duration",{get:function(){try{return n.demuxer.scripMeta.amf2.metaData.duration}catch(e){return n.options.duration||0}}}),Object.defineProperty(r,"frameRate",{get:function(){var t=Math.round(n.options.frameRate||30);try{return Math.round(n.demuxer.scripMeta.amf2.metaData.framerate)||t}catch(e){return t}}}),Object.defineProperty(r,"frameDuration",{get:function(){return 1e3/r.frameRate|0}}),Object.defineProperty(r,"muted",{get:function(){return n.decoder.audio.muted},set:function(e){n.decoder.audio.muted=e}}),Object.defineProperty(r,"volume",{get:function(){try{return n.decoder.audio.volume}catch(e){return 0}},set:function(t){try{return n.decoder.audio.volume=C(t,0,1),r.volume}catch(e){return t}}}),Object.defineProperty(r,"loaded",{get:function(){return n.decoder.video.loaded}}),Object.defineProperty(r,"playing",{get:function(){return n.decoder.playing}}),Object.defineProperty(r,"ended",{get:function(){return n.decoder.ended}}),Object.defineProperty(r,"play",{value:function(){r.playing||n.decoder.play()}}),Object.defineProperty(r,"pause",{value:function(){n.decoder.pause()}}),Object.defineProperty(r,"toggle",{value:function(){r.playing?r.pause():r.play()}})}(e,this),function(e,i){var t=e.events.proxy;e.on("scripMeta",function(e){var t=e.amf2.metaData,n=t.width,r=t.height;n&&r&&(i.$canvas.width=n,i.$canvas.height=r)}),t(i.$canvas,"click",function(){i.toggle()})}(e,this)}function V(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}var F=function(){function n(){var t=this,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};if(c(this,n),this.option=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?V(n,!0).forEach(function(e){r(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):V(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({},n.option,{},e),this.context=new(window.AudioContext||window.webkitAudioContext),this.gainNode=this.context.createGain(),this.gainNode.gain.value=this.option.volume,this.source=null,this.decoding=!1,this.playing=!1,this.loadLength=0,this.loadByteSize=0,this.audioDuration=0,this.audioLength=0,this.timestamps=[],this.audiobuffers=[],this.timestampTmp=[],this.decodeErrorBuffer=new Uint8Array,this.decodeWaitingBuffer=new Uint8Array,this.autoEndDebounce=O(function(){t.end()},this.option.autoEndTime),this.option.touchResume&&"suspended"===this.context.state&&"ontouchstart"in window){document.body.addEventListener("touchstart",function e(){t.context.resume(),t.volume=1,document.body.removeEventListener("touchstart",e,!1)},!1)}}return t(n,[{key:"destroy",value:function(){return this.stop(),this.context=null,this.gainNode=null,this.source=null,this.timestamps=[],this.audiobuffers=[],this.timestampTmp=[],this.decodeErrorBuffer=new Uint8Array,this.decodeWaitingBuffer=new Uint8Array,this.option.onDestroy(),this}},{key:"load",value:function(e,t){var n=this;if(this.decoding=!0,this.loadLength+=1,this.loadByteSize+=e.byteLength,this.option.onLoad(e,t),this.decodeWaitingBuffer.byteLength>=this.option.chunk){this.timestamps.push(this.timestampTmp[0]),this.timestampTmp=[];var r=A(this.decodeErrorBuffer,this.decodeWaitingBuffer).buffer;this.decodeWaitingBuffer=new Uint8Array,this.context.decodeAudioData(r,function(e){n.audioDuration+=e.duration,n.audioLength+=e.length,n.audiobuffers.push(e),n.decodeErrorBuffer=new Uint8Array,n.option.onDecodeDone(e)},function(e){n.decodeErrorBuffer=A(n.decodeErrorBuffer,n.decodeWaitingBuffer),n.option.onDecodeError(e)})}else this.timestampTmp.push(t),this.decodeWaitingBuffer=A(this.decodeWaitingBuffer,e);return this.option.autoEnd&&this.autoEndDebounce(),this}},{key:"end",value:function(){var t=this;if(this.decodeWaitingBuffer.length){this.timestamps.push(this.timestampTmp[0]),this.timestampTmp=[];var e=this.decodeWaitingBuffer.buffer;this.decodeWaitingBuffer=new Uint8Array,this.decodeErrorBuffer=new Uint8Array,this.context.decodeAudioData(e,function(e){t.audioDuration+=e.duration,t.audioLength+=e.length,t.audiobuffers.push(e),t.decoding=!1,t.option.onEnd()})}return this}},{key:"play",value:function(e){var r=this,i=0<arguments.length&&void 0!==e?e:0;this.source&&(this.source.onended=null,this.source.stop(),this.source=null),this.playing=!0;var n=this.timestamps.findIndex(function(e,t){var n=r.audiobuffers[t];return n&&e+1e3*n.duration>=i}),a=this.timestamps[n],t=this.audiobuffers[n];if(void 0===a||void 0===t)return this.stop(n,a);var o=Math.max(0,(i-a)/1e3);return this.source=this.context.createBufferSource(),this.source.connect(this.gainNode),this.gainNode.connect(this.context.destination),this.source.buffer=t,this.option.onPlay(t,i,o),this.source.start(0,o),this.source.onended=function(){var e=r.timestamps[n+1],t=r.audiobuffers[n+1];void 0!==e&&void 0!==t?(r.play(r.option.onNext(e)),r.option.cache||(r.audiobuffers.splice(0,n+1),r.timestamps.splice(0,n+1))):r.stop(n,a)},this}},{key:"stop",value:function(e,t){return this.playing=!1,this.source&&(this.source.onended=null,this.source.stop(),this.source=null),this.option.onStop(e,t),this}},{key:"volume",get:function(){return this.gainNode.gain.value},set:function(e){this.gainNode.gain.value=e,this.option.onVolumeChange(e)}}],[{key:"option",get:function(){return{volume:.7,cache:!0,chunk:65536,autoEnd:!0,autoEndTime:5e3,touchResume:!0,onNext:function(e){return e},onLoad:function(){return null},onStop:function(){return null},onPlay:function(){return null},onEnd:function(){return null},onDestroy:function(){return null},onDecodeDone:function(){return null},onDecodeError:function(){return null},onVolumeChange:function(){return null}}}}]),n}(),R=function(){function e(r,i){var n=this;c(this,e),this.flv=r,this.dida=new F({volume:r.options.muted?0:r.options.volume,cache:!0,onNext:function(e){var t=1e3*i.currentTime,n=e-t;return Math.abs(n)>=r.options.maxTimeDiff?(r.debug.log("time-sync",n),t):e},onVolumeChange:function(e){n.flv.emit("volumechange",e)}}),r.on("audioData",function(e,t){n.dida.load(e,t)}),r.on("destroy",function(){n.dida.destroy()})}return t(e,[{key:"play",value:function(e){var t=0<arguments.length&&void 0!==e?e:0;this.dida.play(1e3*t)}},{key:"stop",value:function(){this.dida.stop()}},{key:"muted",get:function(){return 0===this.volume},set:function(e){this.volume=e?0:.7}},{key:"volume",get:function(){return this.dida.volume},set:function(e){this.dida.volume=e}},{key:"decoding",get:function(){return this.dida.decoding}},{key:"playing",get:function(){return this.dida.playing}}]),e}(),U=function(){function r(t){var n=this;c(this,r),this.flv=t,this.ended=!1,this.playing=!1,this.waiting=!1,this.animationFrameTimer=null,this.waitingTimer=null,this.currentTime=0,this.lastUpdateTime=0,this.video=new window.FlvplayerDecoder(t,this),t.options.hasAudio?this.audio=new R(t,this):this.audio={play:function(){return null},stop:function(){return null},playing:!0,decoding:!1},t.on("ready",function(){t.options.autoPlay?n.play():n.video.draw(0)}),t.on("destroy",function(){n.pause()}),t.on("timeupdate",function(e){!t.options.live&&e>=t.player.duration&&n.pause()});var e=!1;t.events.proxy(document,"visibilitychange",function(){document.hidden?(e=n.playing,n.pause()):e&&n.play()})}return t(r,[{key:"play",value:function(){this.lastUpdateTime=D(),this.video.play(this.currentTime),this.audio.play(this.currentTime),this.animationFrame(),this.flv.emit("play")}},{key:"animationFrame",value:function(){var t=this,e=this.flv,n=e.options,r=e.player,i=e.debug;this.animationFrameTimer=requestAnimationFrame(function(){if(!t.video.playing||!t.audio.playing)return r.streaming||t.video.decoding||t.audio.decoding?(t.ended=!1,t.playing=!0,t.waiting=!0,t.flv.emit("waiting",t.currentTime),void(t.waitingTimer=setTimeout(function(){i.log("play-retry",{streaming:r.streaming,playing:{video:t.video.playing,audio:t.audio.playing},decoding:{video:t.video.decoding,audio:t.audio.decoding}}),t.play()},1e3))):(t.ended=!0,t.playing=!1,t.waiting=!1,t.flv.emit("ended",t.currentTime),void(n.loop&&n.cache?(t.currentTime=0,t.play(),t.flv.emit("loop")):t.pause()));t.ended=!1,t.playing=!0,t.waiting=!1;var e=D();t.currentTime+=(e-t.lastUpdateTime)/1e3,t.lastUpdateTime=e,t.flv.emit("timeupdate",t.currentTime),t.animationFrame()})}},{key:"pause",value:function(){cancelAnimationFrame(this.animationFrameTimer),clearTimeout(this.waitingTimer),this.animationFrameTimer=null,this.waitingTimer=null,this.video.stop(),this.audio.stop(),this.ended=!1,this.playing=!1,this.waiting=!1,this.flv.emit("pause")}},{key:"seeked",value:function(e){var t=this.flv,n=t.player;t.options.cache&&(cancelAnimationFrame(this.animationFrameTimer),clearTimeout(this.waitingTimer),this.animationFrameTimer=null,this.waitingTimer=null,this.currentTime=e,this.video.draw(Math.floor(e*n.frameRate)),this.playing&&this.play(),this.flv.emit("seeked",e))}}]),r}();function H(r){var i=this;c(this,H);var t=r.options,a=r.debug;this.header=null,this.streaming=!1,this.demuxed=!1,this.videoDataSize=0,this.audioDataSize=0,this.videoDataLength=0,this.audioDataLength=0,this.streamStartTime=0,this.streamEndTime=0,this.scripMeta=null,this.AudioSpecificConfig=null,this.AVCDecoderConfigurationRecord=null,this.demuxWorker=k("class FlvPlayerError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'FlvPlayerError';\n    }\n}\n\nconst debug = {\n    warn: (condition, ...args) => {\n        if (!condition) {\n            console.warn(...args);\n        }\n    },\n    error: (condition, msg) => {\n        if (!condition) {\n            throw new FlvPlayerError(msg);\n        }\n    },\n};\n\nfunction mergeBuffer(...buffers) {\n    const Cons = buffers[0].constructor;\n    return buffers.reduce((pre, val) => {\n        const merge = new Cons((pre.byteLength | 0) + (val.byteLength | 0));\n        merge.set(pre, 0);\n        merge.set(val, pre.byteLength | 0);\n        return merge;\n    }, new Cons());\n}\n\nfunction readBufferSum(array, uint = true) {\n    return array.reduce((totle, num, index) => totle + (uint ? num : num - 128) * 256 ** (array.length - index - 1), 0);\n}\n\nfunction readString(array) {\n    return String.fromCharCode.call(String, ...array);\n}\n\nfunction readBuffer(buffer) {\n    let index = 0;\n    function read(length) {\n        const tempUint8 = new Uint8Array(length);\n        for (let i = 0; i < length; i += 1) {\n            tempUint8[i] = buffer[index];\n            index += 1;\n        }\n        read.index = index;\n        return tempUint8;\n    }\n    read.index = 0;\n    return read;\n}\n\nfunction readDouble(array) {\n    const view = new DataView(new ArrayBuffer(array.length));\n    array.forEach((b, i) => {\n        view.setUint8(i, b);\n    });\n    return view.getFloat64(0);\n}\n\nfunction readBoolean(array) {\n    return array[0] !== 0;\n}\n\nlet index = 0;\nlet header = null;\nlet uint8 = new Uint8Array();\nlet scripMeta = null;\nlet AudioSpecificConfig = null;\nlet AVCDecoderConfigurationRecord = null;\nconst nalStart = new Uint8Array([0x00, 0x00, 0x00, 0x01]);\n\nfunction readable(length) {\n    return uint8.length - index >= length;\n}\n\nfunction read(length) {\n    const tempUint8 = new Uint8Array(length);\n    for (let i = 0; i < length; i += 1) {\n        tempUint8[i] = uint8[index];\n        index += 1;\n    }\n    return tempUint8;\n}\n\nfunction demuxerScripTag(tag) {\n    const readScripTag = readBuffer(tag.body);\n    const amf1 = Object.create(null);\n    const amf2 = Object.create(null);\n\n    amf1.type = readScripTag(1)[0];\n    debug.error(amf1.type === 2, `AMF: [amf1] type expect 2, but got ${amf1.type}`);\n    amf1.size = readBufferSum(readScripTag(2));\n    amf1.string = readString(readScripTag(amf1.size));\n\n    amf2.type = readScripTag(1)[0];\n    debug.error(amf2.type === 8 || amf2.type === 3, `AMF: [amf2] type expect 8 or 3, but got ${amf2.type}`);\n    amf2.size = readBufferSum(readScripTag(4));\n    amf2.metaData = Object.create(null);\n\n    function getValue(type) {\n        let value = null;\n        if (type !== undefined) {\n            switch (type) {\n                case 0:\n                    value = readDouble(readScripTag(8));\n                    break;\n                case 1:\n                    value = readBoolean(readScripTag(1));\n                    break;\n                case 2: {\n                    const valueLength = readBufferSum(readScripTag(2));\n                    value = readString(readScripTag(valueLength));\n                    break;\n                }\n                case 3: {\n                    value = Object.create(null);\n                    let lastType = -1;\n                    while (lastType !== 9) {\n                        const nameLength = readBufferSum(readScripTag(2));\n                        const name = readString(readScripTag(nameLength));\n                        const itemType = readScripTag(1)[0];\n                        if (name) {\n                            value[name] = getValue(itemType);\n                        }\n                        lastType = itemType;\n                    }\n                    break;\n                }\n                case 5:\n                    value = null;\n                    break;\n                case 6:\n                    value = undefined;\n                    break;\n                case 7:\n                    value = `Reference #${readScripTag.index}`;\n                    readScripTag(2);\n                    break;\n                case 8: {\n                    value = Object.create(null);\n                    let lastType = -1;\n                    while (lastType !== 9) {\n                        const nameLength = readBufferSum(readScripTag(2));\n                        const name = readString(readScripTag(nameLength));\n                        const itemType = readScripTag(1)[0];\n                        if (name) {\n                            value[name] = getValue(itemType);\n                        }\n                        lastType = itemType;\n                    }\n                    break;\n                }\n                case 10: {\n                    const valueLength = readBufferSum(readScripTag(4));\n                    value = [];\n                    for (let index = 0; index < valueLength; index += 1) {\n                        const itemType = readScripTag(1)[0];\n                        value.push(getValue(itemType));\n                    }\n                    break;\n                }\n                case 11:\n                    value = readDouble(readScripTag(2));\n                    break;\n                case 12: {\n                    const valueLength = readBufferSum(readScripTag(4));\n                    value = readString(readScripTag(valueLength));\n                    break;\n                }\n                default:\n                    debug.error(false, `AMF: Unknown metaData type: ${type}`);\n                    break;\n            }\n        }\n        return value;\n    }\n\n    while (readScripTag.index < tag.body.length) {\n        const nameLength = readBufferSum(readScripTag(2));\n        const name = readString(readScripTag(nameLength));\n        const type = readScripTag(1)[0];\n        if (name) {\n            amf2.metaData[name] = getValue(type);\n        }\n    }\n\n    debug.warn(readScripTag.index === tag.body.length, '[AMF] Seems to be incompletely parsed');\n    debug.warn(amf2.size === Object.keys(amf2.metaData).length, '[AMF] [amf2] length does not match');\n\n    scripMeta = { amf1, amf2 };\n    postMessage({\n        type: 'scripMeta',\n        data: scripMeta,\n    });\n}\n\nfunction demuxerVideoTag(tag) {\n    debug.error(tag.body.length > 1, 'Invalid video packet');\n    const header = {\n        frameType: (tag.body[0] & 0xf0) >> 4,\n        codecID: tag.body[0] & 0x0f,\n    };\n    debug.error(header.codecID === 7, `[videoTrack] Unsupported codec in video frame: ${header.codecID}`);\n    const packet = tag.body.slice(1, 5);\n    debug.error(packet.length >= 4, '[H264] Invalid AVC packet, missing AVCPacketType or/and CompositionTime');\n    const view = new DataView(packet.buffer);\n    const AVCPacketType = view.getUint8(0);\n    const CompositionTime = ((view.getUint32(0) & 0x00ffffff) << 8) >> 8;\n    const pts = CompositionTime + tag.timestamp;\n    const packetData = tag.body.subarray(5);\n\n    if (AVCPacketType === 0) {\n        debug.warn(!AVCDecoderConfigurationRecord, '[h264] Find another one AVCDecoderConfigurationRecord');\n        debug.error(packetData.length >= 7, '[H264] AVCDecoderConfigurationRecord parse length is not enough');\n        const readDcr = readBuffer(packetData);\n        const result = {};\n        result.configurationVersion = readDcr(1)[0];\n        debug.error(\n            result.configurationVersion === 1,\n            `[H264] Invalid configurationVersion: ${result.configurationVersion}`,\n        );\n        result.AVCProfileIndication = readDcr(1)[0];\n        debug.error(\n            result.AVCProfileIndication !== 0,\n            `[H264] Invalid AVCProfileIndication: ${result.AVCProfileIndication}`,\n        );\n        result.profile_compatibility = readDcr(1)[0];\n        result.AVCLevelIndication = readDcr(1)[0];\n        result.lengthSizeMinusOne = (readDcr(1)[0] & 3) + 1;\n        debug.error(\n            result.lengthSizeMinusOne === 4 || result.lengthSizeMinusOne !== 3,\n            `[H264] Invalid lengthSizeMinusOne: ${result.lengthSizeMinusOne}`,\n        );\n        result.numOfSequenceParameterSets = readDcr(1)[0] & 31;\n        debug.error(\n            result.numOfSequenceParameterSets !== 0,\n            `[H264] Invalid numOfSequenceParameterSets: ${result.numOfSequenceParameterSets}`,\n        );\n        debug.warn(\n            result.numOfSequenceParameterSets === 1,\n            `[H264] Strange numOfSequenceParameterSets: ${result.numOfSequenceParameterSets}`,\n        );\n        for (let index = 0; index < result.numOfSequenceParameterSets; index += 1) {\n            result.sequenceParameterSetLength = readBufferSum(readDcr(2));\n            if (result.sequenceParameterSetLength > 0) {\n                const SPS = readDcr(result.sequenceParameterSetLength);\n                postMessage({\n                    type: 'videoData',\n                    data: mergeBuffer(nalStart, SPS),\n                });\n            }\n        }\n        result.numOfPictureParameterSets = readDcr(1)[0];\n        debug.error(\n            result.numOfPictureParameterSets !== 0,\n            `[H264] Invalid numOfPictureParameterSets: ${result.numOfPictureParameterSets}`,\n        );\n        debug.warn(\n            result.numOfPictureParameterSets === 1,\n            `[H264] Strange numOfPictureParameterSets: ${result.numOfPictureParameterSets}`,\n        );\n        for (let index = 0; index < result.numOfPictureParameterSets; index += 1) {\n            result.pictureParameterSetLength = readBufferSum(readDcr(2));\n            if (result.pictureParameterSetLength > 0) {\n                const PPS = readDcr(result.pictureParameterSetLength);\n                postMessage({\n                    type: 'videoData',\n                    data: mergeBuffer(nalStart, PPS),\n                });\n            }\n        }\n        AVCDecoderConfigurationRecord = result;\n        postMessage({\n            type: 'AVCDecoderConfigurationRecord',\n            data: result,\n        });\n    } else if (AVCPacketType === 1) {\n        const { lengthSizeMinusOne } = AVCDecoderConfigurationRecord;\n        const readVideo = readBuffer(packetData);\n        while (readVideo.index < packetData.length) {\n            const length = readBufferSum(readVideo(lengthSizeMinusOne));\n            postMessage({\n                type: 'videoData',\n                data: mergeBuffer(nalStart, readVideo(length)),\n                timestamp: pts,\n            });\n        }\n    } else {\n        debug.error(AVCPacketType === 2, `[H264] Invalid video packet type ${AVCPacketType}`);\n    }\n}\n\nfunction demuxerAudioTag(tag) {\n    debug.error(tag.body.length > 1, 'Invalid audio packet');\n    const header = {\n        soundFormat: (tag.body[0] & 0xf0) >> 4,\n        soundRate: (tag.body[0] & 0x0c) >> 2,\n        soundSize: (tag.body[0] & 0x02) >> 1,\n        soundType: (tag.body[0] & 0x01) >> 0,\n    };\n    debug.error(header.soundFormat === 10, `[audioTrack] unsupported audio format: ${header.soundFormat}`);\n    const packet = tag.body.subarray(1);\n    const packetType = packet[0];\n    if (packetType === 0) {\n        const packetData = packet.subarray(1);\n        debug.warn(!AudioSpecificConfig, '[AAC] Find another one AudioSpecificConfig');\n        debug.error(packetData.length >= 2, '[AAC] AudioSpecificConfig parse length is not enough');\n        const result = {};\n        result.audioObjectType = (packetData[0] & 0xf8) >> 3;\n        result.samplingFrequencyIndex = ((packetData[0] & 7) << 1) + (((packetData[1] & 0x80) >> 7) & 1);\n        result.channelConfiguration = (packetData[1] & 0x7f) >> 3;\n        AudioSpecificConfig = result;\n        postMessage({\n            type: 'AudioSpecificConfig',\n            data: result,\n        });\n    } else {\n        const { audioObjectType, samplingFrequencyIndex, channelConfiguration } = AudioSpecificConfig;\n        const ADTSLen = tag.dataSize - 2 + 7;\n        const ADTSHeader = new Uint8Array(7);\n        ADTSHeader[0] = 0xff;\n        ADTSHeader[1] = 0xf0;\n        ADTSHeader[1] |= 0 << 3;\n        ADTSHeader[1] |= 0 << 1;\n        ADTSHeader[1] |= 1;\n        ADTSHeader[2] = (audioObjectType - 1) << 6;\n        ADTSHeader[2] |= (samplingFrequencyIndex & 0x0f) << 2;\n        ADTSHeader[2] |= 0 << 1;\n        ADTSHeader[2] |= (channelConfiguration & 0x04) >> 2;\n        ADTSHeader[3] = (channelConfiguration & 0x03) << 6;\n        ADTSHeader[3] |= 0 << 5;\n        ADTSHeader[3] |= 0 << 4;\n        ADTSHeader[3] |= 0 << 3;\n        ADTSHeader[3] |= 0 << 2;\n        ADTSHeader[3] |= (ADTSLen & 0x1800) >> 11;\n        ADTSHeader[4] = (ADTSLen & 0x7f8) >> 3;\n        ADTSHeader[5] = (ADTSLen & 0x7) << 5;\n        ADTSHeader[5] |= 0x1f;\n        ADTSHeader[6] = 0xfc;\n        const ADTSBody = tag.body.subarray(2);\n        postMessage({\n            type: 'audioData',\n            data: mergeBuffer(ADTSHeader, ADTSBody),\n            timestamp: tag.timestamp,\n        });\n    }\n}\n\nonmessage = event => {\n    uint8 = mergeBuffer(uint8, event.data);\n    if (!header && readable(13)) {\n        header = Object.create(null);\n        header.signature = readString(read(3));\n        header.version = read(1)[0];\n        debug.error(header.signature === 'FLV' && header.version === 1, 'FLV header not found');\n        header.flags = read(1)[0];\n        const hasAudio = ((header.flags & 4) >>> 2) !== 0;\n        const hasVideo = (header.flags & 1) !== 0;\n        debug.warn(hasVideo, '[FLV header] flags not found video');\n        debug.warn(hasAudio, '[FLV header] flags not found audio');\n        header.headersize = readBufferSum(read(4));\n        const prevTagSize = readBufferSum(read(4));\n        debug.error(prevTagSize === 0, `PrevTagSize0 should be equal to 0, but got ${prevTagSize}`);\n        postMessage({\n            type: 'flvHeader',\n            data: header,\n        });\n    }\n\n    while (index < uint8.length) {\n        const tag = Object.create(null);\n        const restIndex = index;\n\n        if (readable(11)) {\n            tag.tagType = read(1)[0];\n            tag.dataSize = readBufferSum(read(3));\n            const ts2 = read(1)[0];\n            const ts1 = read(1)[0];\n            const ts0 = read(1)[0];\n            const ts3 = read(1)[0];\n            tag.timestamp = ts0 | (ts1 << 8) | (ts2 << 16) | (ts3 << 24);\n            tag.streamID = readBufferSum(read(3));\n            debug.error(tag.streamID === 0, `streamID should be equal to 0, but got ${tag.streamID}`);\n        } else {\n            index = 0;\n            uint8 = uint8.subarray(restIndex);\n            return;\n        }\n\n        if (readable(tag.dataSize + 4)) {\n            tag.body = read(tag.dataSize);\n            const prevTagSize = readBufferSum(read(4));\n            debug.error(prevTagSize === tag.dataSize + 11, `Invalid PrevTagSize: ${prevTagSize}`);\n        } else {\n            index = 0;\n            uint8 = uint8.subarray(restIndex);\n            return;\n        }\n\n        switch (tag.tagType) {\n            case 18:\n                demuxerScripTag(tag);\n                break;\n            case 9:\n                demuxerVideoTag(tag);\n                break;\n            case 8:\n                demuxerAudioTag(tag);\n                break;\n            default:\n                debug.error(false, `unknown tag type: ${tag.tagType}`);\n                break;\n        }\n    }\n\n    index = 0;\n    uint8 = new Uint8Array();\n};\n"),this.demuxRate=E(function(e){r.emit("demuxRate",e)}),r.on("destroy",function(){i.demuxWorker.terminate(),i.demuxWorker=null}),r.on("streamStart",function(){if(i.streaming=!0,i.streamStartTime=D(),"string"==typeof t.url){var e=Object.assign(document.createElement("a"),{href:t.url}).href;a.log("stream-url",e)}}),r.on("streaming",function(e){i.demuxWorker.postMessage(e)}),r.on("streamEnd",function(e){i.streaming=!1,i.streamEndTime=D(),e&&(i.index=0,i.demuxWorker.postMessage(e)),a.log("stream-time","".concat(i.streamEndTime-i.streamStartTime," ms")),i.demuxed=!0,r.emit("demuxDone"),a.log("demux-done")});var o=new Uint8Array,u=new Uint8Array;this.demuxWorker.onmessage=function(e){var t=e.data;switch(t.type){case"flvHeader":i.header=t.data,r.emit("flvHeader",i.header),a.log("flv-header",i.header);break;case"scripMeta":i.scripMeta=t.data,r.emit("scripMeta",i.scripMeta),a.log("scrip-meta",i.scripMeta);break;case"AVCDecoderConfigurationRecord":i.AVCDecoderConfigurationRecord=t.data,r.emit("AVCDecoderConfigurationRecord",i.AVCDecoderConfigurationRecord),a.log("AVCDecoderConfigurationRecord",i.AVCDecoderConfigurationRecord),a.log("AVC-profile",function(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}(i.AVCDecoderConfigurationRecord.AVCProfileIndication)),a.log("AVC-level",function(e){return(e/10).toFixed(1)}(i.AVCDecoderConfigurationRecord.AVCLevelIndication));break;case"AudioSpecificConfig":i.AudioSpecificConfig=t.data,r.emit("AudioSpecificConfig",i.AudioSpecificConfig),a.log("AudioSpecificConfig",i.AudioSpecificConfig);break;case"videoData":i.demuxRate(1),i.videoDataLength+=1,i.videoDataSize+=t.data.byteLength;var n=x(t.data);switch(n(4),31&n(1)[0]){case 1:case 5:r.emit("videoData",A(o,u,t.data),t.timestamp);break;case 7:o=t.data;break;case 8:u=t.data}break;case"audioData":i.audioDataLength+=1,i.audioDataSize+=t.data.byteLength,r.emit("audioData",t.data,t.timestamp)}}}function I(n){var r=this;c(this,I);var e=n.debug,t=n.options,i=n.events.proxy;this.byteLength=0,this.streamRate=E(function(e){n.emit("streamRate",e)}),this.socket=new WebSocket(n.options.url),this.socket.binaryType="arraybuffer",n.emit("streamStart"),i(this.socket,"open",function(){r.socket.send(t.socketSend)}),i(this.socket,"message",function(e){var t=new Uint8Array(e.data);r.byteLength+=t.byteLength,r.streamRate(t.byteLength),n.emit("streaming",t)}),i(this.socket,"close",function(){n.emit("streamEnd"),e.log("stream-end","".concat(r.byteLength," byte"))}),i(this.socket,"error",function(e){throw n.emit("streamError",e),e}),n.on("destroy",function(){r.socket.close()})}function z(n){c(this,z);var e=new FileReader,t=n.events.proxy;t(e,"load",function(e){var t=new Uint8Array(e.target.result);n.emit("streamEnd",t),n.debug.log("stream-end","".concat(t.byteLength," byte"))}),t(e,"error",function(e){n.emit("streamError",e)}),n.on("destroy",function(){e.abort()}),n.emit("streamStart"),e.readAsArrayBuffer(n.options.url)}var $=function(){function e(t){var n=this;c(this,e),this.flv=t,this.byteLength=0,this.reader=null,this.chunkStart=0,this.data=new Uint8Array,this.readChunk=P(this.readChunk,1e3),this.streamRate=E(function(e){t.emit("streamRate",e)}),t.on("destroy",function(){n.reader.cancel(),n.data=null}),t.on("timeupdate",function(e){!t.options.live&&t.player.loaded-e<=5&&n.readChunk()}),this.init()}return t(e,[{key:"readChunk",value:function(){var e=this.flv.options,t=Math.min(this.chunkStart+e.chunkSize,this.data.length);if(t>this.chunkStart){var n=this.data.subarray(this.chunkStart,t);this.flv.emit("streaming",n),this.chunkStart=t}}},{key:"init",value:function(){var e=this.flv,a=e.options,o=e.debug,u=this;return this.flv.emit("streamStart"),fetch(a.url,{headers:a.headers}).then(function(e){return u.reader=e.body.getReader(),function i(){return u.reader.read().then(function(e){var t=e.done,n=e.value;if(t)return u.flv.emit("streamEnd"),void o.log("stream-end","".concat(u.byteLength," byte"));var r=new Uint8Array(n);return u.byteLength+=r.byteLength,u.streamRate(r.byteLength),a.live?u.flv.emit("streaming",r):(u.data=A(u.data,r),0===u.chunkStart&&u.readChunk()),i()}).catch(function(e){throw u.flv.emit("streamError",e),e})}()}).catch(function(e){throw u.flv.emit("streamError",e),e})}}]),e}(),W=function(){function n(e){c(this,n);var t=n.getLoaderFactory(e.options.url);return e.debug.log("stream-type",t.name),new t(e,this)}return t(n,null,[{key:"getLoaderFactory",value:function(e){return e instanceof File?z:/^ws{1,2}:\/\//i.test(e)?I:$}}]),n}();function q(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}var _=0,N=function(){function n(e){var t;return c(this,n),(t=o(this,u(n).call(this))).options=p(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?q(n,!0).forEach(function(e){r(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):q(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({},n.options,{},e),n.scheme),t.options.live&&(t.options.cache=!1,t.options.hasAudio=!1),"string"==typeof t.options.container&&(t.options.container=document.querySelector(t.options.container)),window.FlvplayerDecoder?t.init():j(t.options.decoder,"FlvplayerDecoder").then(function(){t.init()}),console.log("%c FlvPlayer.js %c 1.1.0 %c https://flvplayer.js.org","color: #fff; background: #5f5f5f","color: #fff; background: #4bc729",""),t}return f(n,h),t(n,[{key:"init",value:function(){this.isDestroy=!1,this.isMobile=S(),this.isWechat=w(),this.debug=new g(this),this.events=new b(this),this.player=new B(this),this.decoder=new U(this),this.demuxer=new H(this),this.stream=new W(this),L(this,this.player),window.FlvplayerControl&&this.options.control&&(this.control=new window.FlvplayerControl(this),L(this,this.control)),_+=1,this.id=_,n.instances.push(this)}},{key:"destroy",value:function(){this.isDestroy=!0,this.emit("destroy"),n.instances.splice(n.instances.indexOf(this),1)}}],[{key:"options",get:function(){return{url:"",container:"",debug:!1,live:!1,loop:!1,autoPlay:!1,hasAudio:!0,control:!0,cache:!0,muted:!1,touchResume:!0,volume:.7,frameRate:30,maxTimeDiff:200,chunkSize:1048576,freeMemory:67108864,width:400,height:300,socketSend:"",headers:{},decoder:"./flvplayer-decoder-baseline.js"}}},{key:"scheme",get:function(){return{url:"string|file",container:"string",debug:"boolean",live:"boolean",loop:"boolean",autoPlay:"boolean",hasAudio:"boolean",control:"boolean",cache:"boolean",muted:"boolean",touchResume:"boolean",volume:"number",frameRate:"number",maxTimeDiff:"number",chunkSize:"number",freeMemory:"number",width:"number",height:"number",socketSend:"string",headers:"object",decoder:"string"}}},{key:"version",get:function(){return"1.1.0"}},{key:"env",get:function(){return'"production"'}},{key:"utils",get:function(){return M}},{key:"Emitter",get:function(){return h}}]),n}();return Object.defineProperty(N,"instances",{value:[]}),N});
